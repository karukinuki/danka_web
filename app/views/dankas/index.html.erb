
  <main>
      <div class="">
        <h1 class="pl-3 float-left">檀家名簿</h1>
        <h2 class="js-span-wrap-text">サンプルテキスト</h2>
        <div class="float-right">
          <span class="btn btn-warning"><%= link_to("檀家登録","/dankas/new")%></span>
        </div>
        <div class=" my-1 serch-form right float-right">
          <%= search_form_for @q do |f| %>
            <%= f.label :name_or_addless_cont,"檀家名" %>
            <%= f.search_field :name_or_addless_cont %>

            <%= f.submit "検索" %>
          <% end %>
        </div>
      </div>
      <div class="container-fluid c-table">
        <table class="table table-striped border">
          <thead>
            <tr class="text-nowrap">
              <th scope="col">#</th>
              <th scope="col">檀家名</th>
              <th scope="col">郵便番号</th>
              <th scope="col">住所</th>
              <th scope="col">電話番号</th>
            </tr>
          </thead>
          <% @dankas.each do |danka| %>
            <tbody>
              <tr>
                <th scope="row"><%= danka.id %></th>
                <td class="text-nowrap">
                  <%= link_to danka_path(danka) do %>
                    <ruby>
                    <rb>
                      <%= danka.name%>
                    <rt>
                      <%= danka.subname %>
                    </ruby>
                  <% end %>
                </td>
                  <td><%= danka.postal %></td>
                <td><%= danka.addless %></td>
                <td><%= danka.tel %></td>
              </tr>
            </tbody>
          <% end %>
        </table>
      </div>
      </main>

      <script>
        class SpanWrap {
          constructor() {
            this.settings = {
              target: ".js-span-wrap-text"
            }
            this.targets = "";
            this.targetLength = 0;
            this.nodes = [];
            this.convertContents = [];
          }

          init(options) {
            this.setup(options);
            this.getNodes();
            this.convert();
            this.set();
          }

          setup(options) {
            this.settings = Object.assign({
              target: this.settings.target
            }, options || {});
            this.targets = document.querySelectorAll(this.settings.target);
            this.targetLength = this.targets.length;
          }

          getNodes() {
            for (let target of this.targets) {
              let nodes = target.childNodes;
              this.nodes.push(nodes);
            }
          }

          convert() {
            for (let i = 0; i < this.targetLength; i++) {
              this.convertContents.push([]);//カラの配列を追加
              for (let node of this.nodes[i]) {
                if (node.nodeType == 3) {//テキストの場合
                  let text = node.textContent.replace(/\s+/g, '');//テキストから空白削除
                  text.split('').forEach((v) => {
                    this.convertContents[i].push("<span>" + v + "</span>");
                  });

                } else {//テキスト以外
                  this.convertContents[i].push(node.outerHTML);
                }
              }
            }
          }

          set() {
            for (let i = 0; i < this.targetLength; i++) {
              this.targets[i].innerHTML = this.convertContents[i].join("");
            }
          }

        }
        const spanWrap = new SpanWrap();
        spanWrap.init();
      spanWrap.init();
      </script>
